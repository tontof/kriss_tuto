#+Title: JS
#+DATE: 
#+Author: 
#+Email: 

#+LANGUAGE: fr
#+OPTIONS: reveal_center:nil reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:1
#+OPTIONS: reveal_title_slide:"<div><h1>%t</h1><h2>%a</h2><h3>%e</h3></div>"
#+MACRO: BO @@latex:\char91@@ @@html:&#91;@@
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: fade
#+REVEAL_THEME: serif
#+REVEAL_HLEVEL: 0
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="JS Introduction.">
#+REVEAL_POSTAMBLE: <div id="reveal-styles"><ul><li><a onclick="document.getElementById('theme').setAttribute('href','../lib/reveal.js/css/theme/default.css'); return false;" href="#">Black</a></li><li><a onclick="document.getElementById('theme').setAttribute('href','../lib/reveal.js/css/theme/blood.css'); return false;" href="#">Blood</a></li><li><a onclick="document.getElementById('theme').setAttribute('href','../lib/reveal.js/css/theme/sky.css'); return false;" href="#">Sky</a></li><li><a onclick="document.getElementById('theme').setAttribute('href','../lib/reveal.js/css/theme/beige.css'); return false;" href="#">Beige</a></li><li><a onclick="document.getElementById('theme').setAttribute('href','../lib/reveal.js/css/theme/simple.css'); return false;" href="#">Simple</a></li><li><a onclick="document.getElementById('theme').setAttribute('href','../lib/reveal.js/css/theme/serif.css'); return false;" href="#">Serif</a></li><li><a onclick="document.getElementById('theme').setAttribute('href','../lib/reveal.js/css/theme/night.css'); return false;" href="#">Night</a></li><li><a onclick="document.getElementById('theme').setAttribute('href','../lib/reveal.js/css/theme/moon.css'); return false;" href="#">Moon</a></li><li><a onclick="document.getElementById('theme').setAttribute('href','../lib/reveal.js/css/theme/solarized.css'); return false;" href="#">Solarized</a></li></ul></div>
#+REVEAL_PLUGINS: (highlight markdown notes)
#+REVEAL_ROOT: ../lib/reveal.js/
#+REVEAL_MATHJAX_URL: ../lib/MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_EXTRA_CSS: ./inc/css/custom.css
#+REVEAL_EXTRA_JS: { src : '../lib/jquery/jquery.min.js' }, { src : '../lib/php.js/dist/php.min.js' }, { src : './inc/js/console.js' }
#+REVEAL_PREAMBLE: <div id="phpjs-compiler"><textarea id="phpjs-code"></textarea><div id="phpjs-results"><div id="phpjs-result"></div><div id="phpjs-html-result"></div></div><button id="phpjs-clear">Clear</button><button id="phpjs-close">Close</button><button id="phpjs-run">Run</button></div>
#+OPTIONS: auto-id:t 

* Les bases en JS
  :PROPERTIES:
  :CUSTOM_ID: js-base
  :END:

   [[./inc/img/js5.png]]

** Introduction à JS
   :PROPERTIES:
   :CUSTOM_ID: introduction
   :END:

   - *JS* : JavaScript
   - Langage impératif, fonctionnel, orienté objet... à prototype
   - Principalement utilisé coté client pour l'interactivité et le dynamisme des pages
   - Possibilité d'utilisation coté serveur avec Node.js
   - Ne pas confondre avec un autre langage de programmation : Java
   - Logo officiel : [[./inc/img/js.png]] 
   - Logo js strict : [[./inc/img/js5.png]]

*** Historique
    :PROPERTIES:
    :CUSTOM_ID: historique
    :END:

   - 1996 : JS 1.0 intégré à NetScape Navigator
   - 1998 : JS 1.3 basé sur les éditions 1 et 2 du Standard ECMA-262
   - 2000 : JS 1.5 édition 3 de ECMA-262 : expression rationnelles, exceptions try/catch
   - 2009 : édition 5 de ECMA-262 : support JSON, mode strict
   - 2012 : ECMAScript 5.1 (supporté par tous les navigateurs modernes)
   - juin 2015 : ECMAScript 2015, ECMAScript 6 ou ES6 : modules, classes, itérateurs, générateurs, promesses
   - juin 2018 : ECMAScript 2018 édition 9 de ECMA-262

*** Fonctionnalités
    :PROPERTIES:
    :CUSTOM_ID: fonctionnalites
    :END:

   - modifier/interagir avec le contenu de la page
   - réaliser/réagir à des actions (clic de souris, touche clavier)
   - interagir avec le support (GPS, caméra, orientation de l'écran, etc.)
   - afficher des pop-ups...
   - etc.

   #+NAME: js-pop-up
   #+BEGIN_SRC src-js
   <button onclick="alert('pop-up');">pop-up</button>
   #+END_SRC

** Comment utiliser du JS dans une page HTML
   :PROPERTIES:
   :CUSTOM_ID: html-js
   :END:

*** Javascript dans le code HTML (Méthodes à éviter)
    :PROPERTIES:
    :CUSTOM_ID: js-inline
    :END:
    - Directement dans les attributs d'une balise HTML
     - par exemple avec l'attribut =onclick=
    - Directement dans le HTML
     - code JS dans balise =<script>= dans =<head>= ou avant =</body>=

   #+NAME: js-inline
   #+BEGIN_SRC src-js
       <button onclick="alert('pop-up-inline');">inline</button>
       <button id="button-body">body</button>
       <script>
         document.getElementById('button-body').onclick=function(){alert('pop-up-body');}
       </script>
   #+END_SRC

*** Javascript externe (Méthode recommandée)
    :PROPERTIES:
    :CUSTOM_ID: js-file
    :END:

   - En utilisant un fichier texte externe =.js=
     - balise =<script>= dans =<head>= ou avant =</body>=

   #+NAME: js-file
   #+BEGIN_SRC src-js
   <head>
     <script src="inc/js/js-file.js"></script>
   </head>
   <body>
       <button id="button-file">file</button>
   </body>
   #+END_SRC

*** Les bonnes pratiques d'utilisation de JS
    :PROPERTIES:
    :CUSTOM_ID: bonnes-pratiques
    :END:
    
    - JS n'est pas implémenté de la même façon dans tous les navigateurs
    - En cas d'erreur le site peut devenir inaccessible
    - L'utilisateur peut empêcher l'exécution de JS


    #+ATTR_REVEAL: :frag (roll-in)
    #+ATTR_HTML: :style text-align:center; color:red; width: 80%; margin: 6vmin auto;
    Dans l'idéal JS doit être utilisé pour améliorer l'expérience
    utilisateur. Il faut éviter de l'utiliser pour ajouter de
    nouvelles fonctionnalités.
    
** Règles de base
   :PROPERTIES:
   :CUSTOM_ID: regles-base
   :END:

   - le langage JS est sensible à la casse
   - chaque instruction se termine par un point virgule =;=
   - commentaires:
     - sur une ligne: =// commentaire=
     - sur plusieurs lignes: =/* commentaire */=

** Les types de base
   :PROPERTIES:
   :CUSTOM_ID: types-base
   :END:

   Type de données :
   - boolean
   - number
   - string
   - object
   - function
     
*** boolean
    :PROPERTIES:
    :CUSTOM_ID: type-boolean
    :END:

    Pour les valeurs booléennes :
    - true
    - false

    cast possible avec la fonction Boolean()

   #+NAME: js-boolean
   #+BEGIN_SRC src-js
   <script>
   console.log(true)
   console.log(false)
   console.log(Boolean())
   console.log(Boolean(1))
   console.log(typeof true)
   </script>
   #+END_SRC

*** number
    :PROPERTIES:
    :CUSTOM_ID: type-number
    :END:

    Pour les valeurs numériques : entiers, réels

    cast possible avec la fonction Number()

   #+NAME: js-number
   #+BEGIN_SRC src-js
   <script>
   console.log(12e3)
   console.log(4.5)
   console.log(Number())
   console.log(Number(true))
   console.log(Number(false))
   console.log(Number("test"))
   </script>
   #+END_SRC

*** Fonctions pour les nombres
    :PROPERTIES:
    :CUSTOM_ID: fonctions-nombres
    :END:

    - =isNaN(val)= : pour tester si =val= est =NaN= (Not a Number)
    - =parseInt(string)= : pour convertir une chaîne en entier
    - =parseFloat(string)= : pour convertir une chaîne en réel

   #+NAME: js-number-function
   #+BEGIN_SRC src-js
   <script>
   console.log(parseInt("3.4a"))
   console.log(parseFloat("3.4a"))
   console.log(parseInt("a3.4"))
   console.log(isNaN(parseFloat("a3.4")))
   </script>
   #+END_SRC

*** string
    :PROPERTIES:
    :CUSTOM_ID: type-string
    :END:

    Pour les chaînes de caractères délimitées par ='= ou ="=

    cast possible avec la fonction String()

   #+NAME: js-string
   #+BEGIN_SRC src-js
   <script>
   console.log("C'est super")
   console.log('C\'est super')
   console.log(String(2))
   console.log('concat'+"énation")
   </script>
   #+END_SRC

*** Propriété des chaînes de caractères
    :PROPERTIES:
    :CUSTOM_ID: proprietes-string
    :END:

    - =length=: Longueur d'une chaîne de caractères

   #+NAME: js-string-length
   #+BEGIN_SRC src-js
   <script>
   console.log("C'est super".length)
   </script>
   #+END_SRC

*** Méthodes des chaînes de caractères
    :PROPERTIES:
    :CUSTOM_ID: methodes-string
    :END:

    #+ATTR_REVEAL: :frag (roll-in)
    - =charAt(int n)= : renvoie du =n= ème caractère
    - =substring(int i, [int j])= : renvoie de la chaîne compris entre le =i= ème et le =j= ème caractère
      - si =j= n'est pas donné, renvoie la chaîne à partir du caractère =i=
    - =toUpperCase()= : conversion en MAJUSCULES
    - =toLowerCase()= : conversion en minuscules
    - =indexOf(string souschaine, [int pos])= : renvoie l’indice de la 1ère occurence de =souschaine= dans la chaîne
    - =lastIndexOf(string souschaine, [int pos])= : renvoie l’indice de la dernière occurrence de =souschaine= dans la chaîne. L’option pos permet de n’effectuer la recherche :
      - qu’à partir d’une certaine position pour =indexOf=
      - jusqu’à une certaine position pour =lastIndexOf=

    #+ATTR_REVEAL: :frag (roll-in)
    #+ATTR_HTML: :style text-align:center; color:green; margin: 6vmin auto;
    Si =souschaine= n'est pas trouvée, =indexOf= et =lastIndexOf= renvoient =-1=

*** Méthodes des chaînes de caractères
    :PROPERTIES:
    :CUSTOM_ID: methodes-string-exemple
    :END:

   #+NAME: js-string-method-example
   #+BEGIN_SRC src-js
   <script>
   console.log("C'est super".charAt(0))
   console.log("C'est super".substring(2,5))
   console.log("C'est super".substring(6))
   console.log("C'est super".toUpperCase())
   console.log("C'est super".toLowerCase())
   console.log("C'est super".indexOf("super"))
   console.log("C'est super".indexOf("super", 7))
   console.log("C'est super".lastIndexOf("e"))
   </script>
   #+END_SRC

** Les variables
   :PROPERTIES:
   :CUSTOM_ID: variables
   :END:

   - =var variable=valeur;=
   - pas de typage obligatoire, détection automatique
   - Portée:
     - globale : déclaration en dehors d'une fonction
     - locale : dans une fonction/instruction

   #+NAME: js-variable
   #+BEGIN_SRC src-js
   <script>
   var variable = 2;
   variable += 4;
   console.log(variable);
   variable = "entier"
   variable += 4;
   console.log(variable);   
   </script>
   #+END_SRC

** Les type d'objets
   :PROPERTIES:
   :CUSTOM_ID: types-objets
   :END:

   Type d'objet :
   - Object
   - Date
   - Array

*** L'objet Object
    :PROPERTIES:
    :CUSTOM_ID: objet-object
    :END:

    =Object= correpond à l'objet générique en javascript.

    | Programmation fonctionnelle | Programmation objet |
    |-----------------------------+---------------------|
    | variable                    | propriété           |
    | fonction                    | méthode             |

*** L'objet Date
   :PROPERTIES:
   :CUSTOM_ID: objet-date
   :END:

   La gestion des dates se fait avec l'objet =Date=
   - =new Date()= définit la date courante
   - =new Date(chaine)= converti la chaîne
   - =new Date(année, [indexMois[, jour[, heures[, minutes[, secondes[, millisecondes]]]]]])=

   #+NAME: js-date
   #+BEGIN_SRC src-js
   <script>
   console.log(new Date());
   console.log(new Date('1970-01-01 13:37:00.000'));
   console.log(new Date(1970, 0, 1, 13, 37, 00, 0));
   </script>
   #+END_SRC

*** Méthodes de l'objet Date
   :PROPERTIES:
   :CUSTOM_ID: methodes-objet-date
   :END:

   #+NAME: js-date
   #+BEGIN_SRC src-js
   <script>
   var date=new Date();
   console.log(date.getFullYear());
   console.log(date.getYear());
   console.log(date.getMonth());
   console.log(date.getDate());
   console.log(date.getDay());
   console.log(date.getHours());
   console.log(date.getMinutes());
   console.log(date.getSeconds());
   console.log(date.getMilliseconds());
   console.log(date.getTime());
   </script>
   #+END_SRC

*** L'objet Array
   :PROPERTIES:
   :CUSTOM_ID: objet-array
   :END:

   Les tableaux sont créés à partir de l'objet [[https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array][=Array=]]. Il est
   possible de donner le nombre d'éléments à la création du
   tableau. Ils peuvent contenir des éléments de types différents.
   - =new Array(arrayLength)=
   - =new Array(element0, element1[, ...[, elementN]])=
   #+NAME: js-date
   #+BEGIN_SRC src-js
   <script>
   console.log(new Array(10));
   console.log(new Array());
   console.log([]);
   var t = [1,"2",3.4,'c'];
   console.log(t);
   t[5]=6;
   console.log(t);
   </script>
   #+END_SRC

   Tableaux associatifs
   Tableaux multi-dimensionnels
   tableaux de types différents

*** Propriété de l'objet Array
   :PROPERTIES:
   :CUSTOM_ID: proprietes-objet-array
   :END:

    - =length=: nombre de cases dans le tableau.

   #+NAME: js-string-length
   #+BEGIN_SRC src-js
   <script>
   var t = ["premier","dernier"];
   console.log(t[0])
   console.log(t[t.length-1])
   </script>
   #+END_SRC

*** Méthodes de l'objet Array
    :PROPERTIES:
    :CUSTOM_ID: mutateurs-array
    :END:

    Mutateurs: modifient le tableau
    #+ATTR_REVEAL: :frag (roll-in)
    - =push(elt)= : ajoute à la fin du tableau l'élément =elt=
    - =unshift(elt)= : ajoute au début du tableau l'élément =elt=
    - =pop()= : supprime et retourne le dernier élément du tableau
    - =shift()= : supprime et retourne le premier élément du tableau
    - =splice(int pos, int nb)= : supprime et retourne =nb= éléments à partir de l'index =pos=
    - =reverse()=: renverse l'ordre des éléments du tableau
    - =sort()=: trie les éléments du tableau

*** Méthodes de l'objet Array
    :PROPERTIES:
    :CUSTOM_ID: accesseurs-array
    :END:

    Accesseurs: ne modifient pas le tableau
    #+ATTR_REVEAL: :frag (roll-in)
    - =indexOf(elt)= : retourne l'index de l'élément =elt= dans le tableau ou -1
    - =lastIndexOf(elt)= : retourne le dernier index de l'élément =elt= dans le tableau ou -1
    - =join([string s])=: concatène tous les éléments du tableau en une chaîne de caractères séparés par =s=
    - =slice([int debut, [int fin]])=: extrait une portion du tableau de l'index =debut= à l'index =fin=

*** Méthodes de l'objet Array
    :PROPERTIES:
    :CUSTOM_ID: methodes-array-exemple
    :END:

   #+NAME: js-string-method-example
   #+BEGIN_SRC src-js
   <script>
   var t = [2,3,4];
   t.unshift(1); t.push(5); 
   console.log(t);
   t.pop(); t.shift();
   console.log(t);
   t.reverse(); console.log(t);
   t.sort(); console.log(t);
   console.log(t.indexOf(2));
   console.log(t.join());
   console.log(t.join('|-|'));
   console.log(t.slice());
   console.log(t.slice(0,1));
   </script>
   #+END_SRC

*** L'objet Math
   :PROPERTIES:
   :CUSTOM_ID: objet-math
   :END:

   Les propriétés et méthodes de l'objet [[https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Math][=Math=]] sont statiques. 
    #+ATTR_REVEAL: :frag (roll-in)
    - =abs(x)=, =acos(x)=, =asin(x)=, =atan(x)=, =cos(x)=, =exp(x)=, =ln(x)=, =log(x)=, =sin(x)=, =sqrt(x)=, =tan(x)= : applique la fonction appropriée à x
    - =round(x)= : renvoie l'arrondi d'un nombre
    - =ceil(x)= : renvoie le plus petit entier supérieur ou égal à x
    - =floor(x)= : renvoie le plus grand entier inférieur ou égal à x
    - =max(x,y)= : renvoie la plus grande des valeurs de x et y
    - =min(x,y)= : renvoie la plus petite des valeurs de x et y
    - =pow(x,y)= : renvoie x à la puissance y
    - =random()= : retourne un nombre pseudo-aléatoire compris entre 0 (inclus) et 1 (exclu)

*** L'objet Math
   :PROPERTIES:
   :CUSTOM_ID: objet-math-exemple
   :END:

   #+NAME: js-math
   #+BEGIN_SRC src-js
   <script>
   pi = Math.PI;
   console.log(pi);
   console.log(Math.round(pi));
   console.log(Math.round(pi+0.5));
   console.log(Math.ceil(pi));
   console.log(Math.floor(pi));
   console.log(Math.min(pi, 4.2));
   console.log(Math.max(pi, 4.2));
   console.log(Math.pow(3, 2));
   console.log(Math.random());
   </script>
   #+END_SRC

** undefined / null
   :PROPERTIES:
   :CUSTOM_ID: undefined-null
   :END:

   - =null= est une valeur qui ne correspond à aucune valeur
   - =undefined= correspond à une variable qui est définie mais qui n'a pas été initialisée
   - =null= et =undefined= correspondent à la valeur booléenne =false=
   
   #+NAME: js-boolean
   #+BEGIN_SRC src-js
   <script>
   console.log(typeof null)
   console.log(typeof undefined)
   </script>
   #+END_SRC

** Les opérateurs arithmétiques
   :PROPERTIES:
   :CUSTOM_ID: operateurs-arithmetiques
   :END:

   - =+ = addition
   - =- = soustraction
   - =* = multiplication
   - =/ = division
   - =% = modulo (reste de la division euclidienne)
   - =**= exponentielle (ES6)
   - =--= décrément
   - =++= incrément

** Les opérateurs de comparaison
   :PROPERTIES:
   :CUSTOM_ID: operateurs-comparaison
   :END:

   - =a == b = : égalité des valeurs
   - =a != b = : différence
   - =a <= b = : infériorité ou égalité
   - =a >= b = : supériorité ou égalité
   - =a  <  b= : infériorité
   - =a  >  b= : supériorité
   - =a === b= : identité (égalité des valeurs et des types)
   - =a !== b= : non identité (différence des valeurs ou des types)

   #+NAME: js-comparison
   #+BEGIN_SRC src-js
   <script>
   console.log(null == undefined)
   console.log(null === undefined)
   </script>
   #+END_SRC

** Structures de contrôle
   :PROPERTIES:
   :CUSTOM_ID: structures-controles
   :END:

   - structures conditionnelles
   - structures répétitives

*** Les structures conditionnelles (if, else, else if)
   :PROPERTIES:
   :CUSTOM_ID: structures-conditionnelles-if-else
   :END:

   #+NAME: js-if
   #+BEGIN_SRC php
if (condition) {
  instructions; // si condition est évaluée à true
} 
   #+END_SRC

   #+NAME: js-if-else
   #+BEGIN_SRC php
if (condition) {
  instructions; // si condition est évaluée à true
} else {
  instructions; // si condition est évaluée à false
}
   #+END_SRC

   #+NAME: js-if-else-elseif
   #+BEGIN_SRC php
if (condition1) {
  instructions; // si condition1 est évaluée à true
} else if (condition2) {
  instructions; // si condition1 évaluée à false et condition2 évaluée à true
} else {
  instructions; // si condition1 et condition2 évaluées à false
}
   #+END_SRC

*** Les structures conditionnelles (if, else, else if)
   :PROPERTIES:
   :CUSTOM_ID: structures-conditionnelles-if-else-exemple
   :END:

   #+NAME: js-if-else
   #+BEGIN_SRC src-js
   <script>
   var valeur = Math.random();
   if (valeur < 0.33) {
     valeur = "petite"
   } else if (valeur < 0.66) {
     valeur = "moyenne"
   } else {
     valeur = "grande"
   }
   console.log(valeur)
   </script>
   #+END_SRC

*** Les structures conditionnelles (switch)
   :PROPERTIES:
   :CUSTOM_ID: structures-conditionnelles-switch
   :END:

   #+NAME: js-switch
   #+BEGIN_SRC php
   switch(expression) {
     case x:
       // si expression == x
       break;
     case y:
       // si expression == y
       break;
     default: 
       // si expression != x et expression != y
   } 
   #+END_SRC

*** Les structures conditionnelles (switch)
   :PROPERTIES:
   :CUSTOM_ID: structures-conditionnelles-switch-exemple
   :END:

   #+NAME: js-switch
   #+BEGIN_SRC src-js
   <script>
   var date = new Date(), day;
   switch (date.getDay()) {
     case 6: // samedi
     case 0: // dimanche
       day = "week-end";
       break;
     case 1: // lundi
     case 2: // mardi
     case 3: // mercredi
     case 4: // jeudi
     case 5: // vendredi
       day = "semaine";
   }
   console.log(day);
   </script>
   #+END_SRC

*** Les structures répétitives (pour)
   :PROPERTIES:
   :CUSTOM_ID: structures-repetitives-for
   :END:

   #+NAME: js-for
   #+BEGIN_SRC php
   for (expr1; expr2; expr3) { // expr1 est exécutée une seule fois au début de la boucle
     instructions;             // exécuté tant que expr2 est évaluée à true
   }                           // expr3 est exécutée à la fin de chaque itération
   #+END_SRC

*** Les structures répétitives (tant que)
   :PROPERTIES:
   :CUSTOM_ID: structures-repetitives-while
   :END:

   #+NAME: js-while
   #+BEGIN_SRC php
   while (condition) {
     instructions; // exécutée si condition vaut true et répétée tant que condition vaut true
   }
   #+END_SRC

   #+NAME: js-do-while
   #+BEGIN_SRC php
   do {
     instructions; // exécutée puis répétée tant que condition vaut true
   }
   while (condition);
   #+END_SRC

*** Exemple général sur les structures
   :PROPERTIES:
   :CUSTOM_ID: structures-repetitives-exemple
   :END:

   #+NAME: js-for-while
   #+BEGIN_SRC src-js
   <script>
   var i = 0, tab = [1,2,3,4];
   do {
     tab[i] = tab[i]%2;
     i++;
   } while (i < tab.length);

   for (i = 0; i < tab.length; i++) {
     console.log(tab[i]);
   }
   </script>
   #+END_SRC

** les fonctions
   :PROPERTIES:
   :CUSTOM_ID: fonctions
   :END:

   - sont des blocs d'instructions que l'on peut répéter dans un programme
   - ne sont pas exécutées directement après leurs définitions
   - sont exécutées par un appel

   #+NAME: js-function
   #+BEGIN_SRC src-js
   <script>
   function helloWorld() {
     console.log("Hello world!");
   }
 
   helloWorld();
   </script>
   #+END_SRC

*** Les arguments ou paramètres
   :PROPERTIES:
   :CUSTOM_ID: fonctions-parametres
   :END:

    - Un argument est une variable, défini après le nom de la fonction entre paranthèses
    - Les arguments sont séparés par une virgule

   #+NAME: function-args
   #+BEGIN_SRC src-js
   <script>
   function helloWorld(hello, world) {
     console.log(hello + ' ' + world);
   }
   helloWorld('Hello', 'world');
   helloWorld('Bonjour', 'tous');
   </script>
   #+END_SRC

*** Les valeurs par défaut
   :PROPERTIES:
   :CUSTOM_ID: fonctions-parametres-defaut
   :END:

    - Il est possible de définir une valeur par défaut à un argument
    - Les arguments qui ont une valeur par défaut sont définis en dernier

   #+NAME: function-default-args
   #+BEGIN_SRC src-js
   <script>
   function helloWorld(hello, world = 'world') {
     console.log(hello + ' ' + world);
   }
 
   helloWorld('Bonjour', 'tous');
   helloWorld('Hello');
   </script>
   #+END_SRC

*** Les retours
   :PROPERTIES:
   :CUSTOM_ID: fonctions-retour
   :END:

    - Tous les types de variables peuvent être retournés par une fonction
    - Si =return= est absent, =null= est retourné

   #+NAME: function-return
   #+BEGIN_SRC src-js
   <script>
   function helloWorld() {
     return "Hello world!";
   }

   console.log(helloWorld());
   </script>
   #+END_SRC

* Les événements en Javascript
   :PROPERTIES:
   :CUSTOM_ID: evenements-js
   :END:

   - Javascript peut interagir avec l'utilisateur grâce à des événements.

** L'événement click
   :PROPERTIES:
   :CUSTOM_ID: evenements-click
   :END:

   - =click= : gestion du clic souris sur un élément
   - utilisation du préfixe =on= dans l'attribut d'une balise
   - =this= représente la balise associé à l'événement

   #+NAME: js-function
   #+BEGIN_SRC src-js
   <button onclick="console.log('button')" value="button1">button</button>
   <button onclick="console.log(this.value)" value="button2">button</button>
   <div onclick="console.log('div')">div</div>
   #+END_SRC

** Les événements généraux
   :PROPERTIES:
   :CUSTOM_ID: evenements-clavier-souris
   :END:

   - =load= : la ressource (page, img, link, iframe, script) est chargée par le navigateur
   - =unload= : l'utilisateur quitte la page
   - =keydown, keypress, keyup= : gestion du clavier
   - =mousedown, mouseover, mouseup, mouseleave, mouseenter, mousemove= : gestion de la souris

** Les événements et les formulaires
   :PROPERTIES:
   :CUSTOM_ID: evenements-formulaires
   :END:
   
   - =focus = : un élément reçoit le focus
   - =blur  = : un élément perd le focus
   - =change= : la valeur d'un champ de formulaire est modifiée
   - =reset = : quand les champs du formulaire sont réinitialisés
   - =submit= : quand le formulaire est soumis

* Modèle Objet de Document (DOM)
   :PROPERTIES:
   :CUSTOM_ID: DOM
   :END:

** Représentation arborescente
   :PROPERTIES:
   :CUSTOM_ID: arbre-html
   :END:

   le code html peut être représenté sous forme arborescente

   [[./inc/img/html.png]] 

** Représentation globale
   :PROPERTIES:
   :CUSTOM_ID: arbre-dom
   :END:

   Javascript représente la page, l'onglet grâce à l'objet global =window=

   [[./inc/img/dom.png]] 

** objet window (propriétés)
   :PROPERTIES:
   :CUSTOM_ID: proprietes-window
   :END:

   - =frames[]= : tableau de frames
   - =location= : url de la page courante
   - =history= : historique de navigation de l'onglet courant
   - =self= : fenêtre courante
   - =opener= : la fenêtre (si elle existe) qui a ouvert la fenêtre courante
   - =parent= : parent de la fenêtre courante, si la fenêtre courante est une sous-partie d’un frameset
   - =top= : fenêtre principale (qui a crée toutes les fenêtres)
   - =name= : nom de la fenêtre

** objet window (méthodes)
   :PROPERTIES:
   :CUSTOM_ID: methodes-window
   :END:

   - =alert(string)= : ouvre une boîte de dialogue avec le message passé en paramètre
   - =prompt(string)= : affiche une fenêtre de saisie
   - =confirm(string)= : ouvre une boîte de dialogue avec les boutons OK et cancel
   - =blur()= : enlève le focus de la fenêtre
   - =focus()= : donne le focus à la fenêtre
   - =scroll(int x, int y)= : positionnement aux coordonnées (x,y)
   - =close()= : ferme la fenêtre

** objet window (méthode open)
   :PROPERTIES:
   :CUSTOM_ID: methode-open-window
   :END:

   =open(URL, string name, string options)= : ouvre une nouvelle fenêtre contenant le document identifié par l'URL

   - =URL= : adresse de la page à charger
   - =nom= : nom de la fenêtre (utilisable par TARGET)
   - =options= (séparées par des , ) :
     - =toolbar= = =[yes|no]= :  affichage de la barre d’outils
     - =location= = =[yes|no]= : affichage de l’URL de la page
     - =directories= = =[yes|no]= : affichage de la barre le lien
     - =status= = =[yes|no]= : affichage de la barre d’état
     - =menubar= = =[yes|no]= : affichage de la barre de menus
     - =scrollbars= = =[yes|no|auto]= : affichage des ascenseurs
     - =resizable= = =[yes|no]= : fenêtre redimensionnable ou non
     - =width= = =pixels=, =height= = =pixels= : largeur et hauteur en pixels
     - =top= = =pixels=, =left= = =pixels= : positionnement vertical et horizontal
     - =fullscreen= = =[yes|no]= : affichage plein écran

** objet window (exemple)
   :PROPERTIES:
   :CUSTOM_ID: window-exemple
   :END:

   Il n'est pas obligatoire de préfixer par =window=

   #+NAME: window-example
   #+BEGIN_SRC src-js
   <script>
   window.alert('alert');
   console.log(window.prompt('prompt'));
   console.log(window.confirm('confirm'));

   // alert('alert');
   // console.log(prompt('prompt'));
   // console.log(confirm('confirm'));
   </script>
   #+END_SRC

** objet window (exemple)
   :PROPERTIES:
   :CUSTOM_ID: window-exemple-open
   :END:

   #+NAME: window-example-open
   #+BEGIN_SRC src-js
   <script>
   var target = open('https://duck.com', 'target', 'resizable=yes,width=420px,height=420px');
   // target.close();
   </script>
   #+END_SRC

** objet document (propriétés)
   :PROPERTIES:
   :CUSTOM_ID: proprietes-document
   :END:

   - =title= : titre du document
   - =location= : URL du document
   - =lastModified= : date de dernière modification
   - =referrer= : URL de la page d’où arrive l'utilisateur
   - =forms[]= : tableaux des formulaires de la page
   - =links[]= : tableaux des liens de la page
   - =images[]= : tableaux des images
   - =applets[]= : tableaux des applets
   - =plugins[]= : tableaux plug-ins

** objet document (méthodes)
   :PROPERTIES:
   :CUSTOM_ID: methodes-document
   :END:

   - =getElementById(string)= : retourne la balise à partir d'un identifiant
   - =querySelector(string)= : retourne la première balise qui correspond à une sélection CSS
   - =querySelectorAll(string)= : retourne toutes les balises qui correspondent à une sélection CSS
   - =write(string)= : écrit une chaîne dans le document
   - =writeln(string)= : écrit une chaîne dans le document + caractère de fin de ligne

** objet document (exemple)
   :PROPERTIES:
   :CUSTOM_ID: methodes-document-exemple
   :END:

   #+NAME: document-example
   #+BEGIN_SRC src-js
   <input type="text" id="input">
   <button onclick="document.getElementById('input').value = 'value';">button</button>
   <button onclick="document.write('write')">write</button>
   #+END_SRC

** Représentation DOM
   :PROPERTIES:
   :CUSTOM_ID: propriete-node
   :END:

   Le document représente la page sous forme arborescente. Chaque nœud est caractérisé par:
   - =nodeName= : le nom (par exemple =#text=, =div=, =span=)
   - =nodeType= : valeur numérique souvent à comparer avec les constantes
     - =Node.ELEMENT_NODE=
     - =Node.ATTRIBUTE_NODE=
     - =Node.TEXT_NODE=
   - =nodeValue= : valeur associée au nœud (pour les formulaires)

** Propriétés d'un nœud
   :PROPERTIES:
   :CUSTOM_ID: proprietes-noeud
   :END:

   Pour se déplacer dans l'arbre DOM, il existe:
   - =parentNode= : le nœud père
   - =childnodes[]= : les nœuds fils du nœud courant
   - =firstChild= : le premier nœud fils
   - =lastChild= : le dernier nœud
   - =previousSibling= : le nœud frère précèdent
   - =nextSibling= : le nœud frère suivant

** Méthodes d'un nœud
   :PROPERTIES:
   :CUSTOM_ID: methodes-noeud
   :END:

   - =appendChild(node)= : nœud à ajouter au nœud parent
   - =removeChild(node)= : nœud à supprimer du nœud parent
   - =replaceChild(newNode, oldNode)= : remplace un nœud par un autre nœud

** Création d'un nœud
   :PROPERTIES:
   :CUSTOM_ID: creation-noeud
   :END:

   - =document.createElement(tag)= : création d'un nœud
   - =document.createTextNode(text)= : création d'un nœud textuel

   #+NAME: document-create-element
   #+BEGIN_SRC src-js
   <div id="div"><span>span1</span><span>span2</span></div>
   <script>
   var span = document.createElement('span').appendChild(document.createTextNode('span3'));
   document.getElementById('div').appendChild(span);
   </script>
   #+END_SRC

** Contenu d'un nœud
   :PROPERTIES:
   :CUSTOM_ID: contenu-noeud
   :END:

   - =innerHTML= : contenu HTML du nœud courant exclu
   - =outerHTML= : contenu HTML du nœud courant inclus
   - =textContent= : contenu textuel du nœud courant

   #+NAME: js-function
   #+BEGIN_SRC src-js
   <button onclick="console.log(this.innerHTML)">button</button>
   <button onclick="console.log(this.outerHTML)">button</button>
   <button onclick="console.log(this.textContent)">button</button>
   #+END_SRC

** Attributs d'un nœud
   :PROPERTIES:
   :CUSTOM_ID: attributs-noeud
   :END:

   - =className= : class associée au nœud
   - =id= : identifiant associé au nœud
   - =getAttribute(name)= : retourne la valeur associée à un attribut
   - =setAttribute(name, value)= : modifie la valeur associée à un attribut
   - =removeAttribute(name)= : supprime un attribut

   #+NAME: js-function
   #+BEGIN_SRC src-js
   <div id="div-id" class="div class"></div>
   <script>
   var elt = document.getElementById("div-id")
   console.log(elt.id)
   console.log(elt.getAttribute("class"))
   elt.setAttribute("class", "class")
   console.log(elt.className)   
   </script>
   #+END_SRC

** objet form (propriétés)
   :PROPERTIES:
   :CUSTOM_ID: proprietes-form
   :END:

   - =name= : nom (unique) du formulaire
   - =method= : méthode de soumission (=get=, =post=)
   - =action= : action déclenchée par la validation du formulaire
   - =elements[]= : tableau des éléments du formulaires
   - =length= : nombre d’éléments du formulaire

** objet form (méthodes)
   :PROPERTIES:
   :CUSTOM_ID: methodes-form
   :END:

   - =submit()= : soumet le formulaire
   - =reset()= : ré-initialise le formulaire

** objet form (événements)
   :PROPERTIES:
   :CUSTOM_ID: evenements-form
   :END:

   - =submit= : action à réaliser lorsque le formulaire est soumis
   - =reset= : action à réaliser lorsque le formulaire est ré-initialisé

   #+NAME: js-onsubmit
   #+BEGIN_SRC src-js
   <script>
   function checkForm() {
     alert('form');
   }
   </script>
   <form id="form-onsubmit" onsubmit="checkForm()">
     <input name="input" value="value">
     <input type="submit" value="submit">
   </form>
   #+END_SRC

** objet navigator (propriétés)
   :PROPERTIES:
   :CUSTOM_ID: navigator
   :END:

   - =appCodeName= : nom de code interne du navigateur
   - =appName= : nom réel du navigateur
   - =appVersion= : version du navigateur
   - =userAgent= : chaîne représentation l'ensemble 
   - =plugins[]= : tableau des plugins installés sur le navigateur

* Les cookies
   :PROPERTIES:
   :CUSTOM_ID: cookies
   :END:

   - Pour stocker des informations côté client
   - Il ne faut jamais stocker des informations sensibles avec les cookies
   - Information accessible en javascript avec =document.cookie=

** Ajouter un cookie
   :PROPERTIES:
   :CUSTOM_ID: ajouter-cookie
   :END:

   #+NAME: js-set-cookie
   #+BEGIN_SRC src-js
   <script>
   function setCookie(name,value,days) {
     var expires = "";
     if (days) {
       var date = new Date();
       date.setTime(date.getTime() + (days*24*60*60*1000));
       expires = "; expires=" + date.toUTCString();
     }
     document.cookie = name + "=" + (value || "")  + expires + "; path=/";
   }
   console.log("Cookie : "+document.cookie);
   setCookie('cookie','value',1);
   console.log("Cookie : "+document.cookie);
   </script>
   #+END_SRC

** Voir un cookie
   :PROPERTIES:
   :CUSTOM_ID: voir-cookie
   :END:

   #+NAME: js-get-cookie
   #+BEGIN_SRC src-js
   <script>
   function getCookie(cname) {
     var name = cname + "=";
     var decodedCookie = decodeURIComponent(document.cookie);
     var ca = decodedCookie.split(';');
     for(var i = 0; i <ca.length; i++) {
       var c = ca[i];
       while (c.charAt(0) == ' ') {
         c = c.substring(1);
       }
       if (c.indexOf(name) == 0) {
         return c.substring(name.length, c.length);
       }
     }
     return "";
   }
   console.log("Cookie : "+document.cookie);
   console.log(getCookie("cookie"));
   </script>
   #+END_SRC

** Supprimer un cookie
   :PROPERTIES:
   :CUSTOM_ID: supprimer-cookie
   :END:

   #+NAME: js-delete-cookie
   #+BEGIN_SRC src-js
   <script>
   function setCookie(name,value,days) {
     var expires = "";
     if (days) {
       var date = new Date();
       date.setTime(date.getTime() + (days*24*60*60*1000));
       expires = "; expires=" + date.toUTCString();
     }
     document.cookie = name + "=" + (value || "")  + expires + "; path=/";
   }
   setCookie('cookie','value',-1);
   console.log("Cookie : "+document.cookie);
   </script>
   #+END_SRC

* JS avancé
  :PROPERTIES:
  :CUSTOM_ID: js-avance
  :END:

** les fonctions anonymes/Array.forEach
   :PROPERTIES:
   :CUSTOM_ID: fonctions-anonyme
   :END:

   #+NAME: js-anonymous-function
   #+BEGIN_SRC src-js
   <script>
   (function(){
     alert('anonymous');
   })();

   ['a','b','c'].forEach(function(element) {
     console.log(element);
   });
   </script>
   #+END_SRC

** Jquery
  :PROPERTIES:
  :CUSTOM_ID: jquery
  :END:

  jQuery est utilisé sur [[https://w3techs.com/technologies/details/js-jquery/all/all][plus de 70% des sites]]
  - https://jquery.com/
  - https://api.jquery.com/
  - http://www.jqapi.com
  Il existe des bibliothèques spécifiques souvent plus adaptées
  - http://microjs.com/
  - https://en.wikipedia.org/wiki/List_of_JavaScript_libraries

** Vanilla JS
  :PROPERTIES:
  :CUSTOM_ID: vanilla-js
  :END:

  - http://vanilla-js.com/
  - http://youmightnotneedjquery.com/


** localStorage/sessionStorage
  :PROPERTIES:
  :CUSTOM_ID: web-storage
  :END:

   - =window.localStorage= : stocke les données sans date d'expiration
   - =window.sessionStorage= : stocke les données pour une session (fermeture de l'onglet)

** Node.js
  :PROPERTIES:
  :CUSTOM_ID: nodejs
  :END:

   - utilisation de javascript côté serveur

** AJAX
  :PROPERTIES:
  :CUSTOM_ID: ajax
  :END:
  
   #+NAME: js-anonymous-function
   #+BEGIN_SRC src-js
   <script>
   var r = new XMLHttpRequest();
   r.open("GET", "index.org", true);
   r.onreadystatechange = function () {
     if (r.readyState != 4 || r.status != 200) return;
     alert(r.responseText);
   };
   r.send(); 
   </script>
   #+END_SRC

** JSON
  :PROPERTIES:
  :CUSTOM_ID: json
  :END:

  JSON (JavaScript Object Notation)
  https://json.org/

   #+NAME: js-anonymous-function
   #+BEGIN_SRC src-js
   <script>
   var json = {
     'string':'value',
     'number':2,
     'array': [
       'a',
       'b',
       'c'
     ]
   }
   console.log(json);
   console.log(JSON.stringify(json));
   </script>
   #+END_SRC
  

** coffeescript, typescript, livescript
  :PROPERTIES:
  :CUSTOM_ID: langage-vers-js
  :END:

   - https://coffeescript.org
   - https://www.typescriptlang.org/
   - http://livescript.net/

** canvas
  :PROPERTIES:
  :CUSTOM_ID: canvas
  :END:

   #+NAME: js-anonymous-function
   #+BEGIN_SRC src-js
   <canvas id="canvas" width="420" height="420" style="border:1px solid #000000;">>
   <script>
   var c = document.getElementById("canvas");
   var ctx = c.getContext("2d");
   // line
   ctx.moveTo(0, 0);
   ctx.lineTo(420, 420);
   ctx.stroke();
   // circle
   ctx.beginPath();
   ctx.arc(210, 210, 120, 0, 2 * Math.PI);
   ctx.stroke();
   // text
   ctx.font = "30px Arial";
   ctx.fillText("Hello World!", 120, 50);
   </script>
   #+END_SRC

** polyfills
  :PROPERTIES:
  :CUSTOM_ID: polyfills
  :END:

   bout de code qui permet d'ajouter certaines fonctionnalités à certains navigateurs
   - https://github.com/aFarkas/html5shiv
   - https://modernizr.com/

** nouvelles notations
  :PROPERTIES:
  :CUSTOM_ID: fonction-flechee
  :END:

   #+NAME: js-fonction-flechee
   #+BEGIN_SRC src-js
   <script>
   var nombres = [
     'un',
     'deux',
     'trois',
     'quatre'
   ];

   console.log(nombres.map(nombre => nombre.length));
   </script>
   #+END_SRC